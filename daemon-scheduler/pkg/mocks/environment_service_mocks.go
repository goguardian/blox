// Copyright 2016-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Automatically generated by MockGen. DO NOT EDIT!
// Source: pkg/environment/environment_service.go

package mocks

import (
	context "context"
	types "github.com/goguardian/blox/daemon-scheduler/pkg/environment/types"
	types0 "github.com/goguardian/blox/daemon-scheduler/pkg/store/types"
	gomock "github.com/golang/mock/gomock"
)

// Mock of EnvironmentService interface
type MockEnvironmentService struct {
	ctrl     *gomock.Controller
	recorder *_MockEnvironmentServiceRecorder
}

// Recorder for MockEnvironmentService (not exported)
type _MockEnvironmentServiceRecorder struct {
	mock *MockEnvironmentService
}

func NewMockEnvironmentService(ctrl *gomock.Controller) *MockEnvironmentService {
	mock := &MockEnvironmentService{ctrl: ctrl}
	mock.recorder = &_MockEnvironmentServiceRecorder{mock}
	return mock
}

func (_m *MockEnvironmentService) EXPECT() *_MockEnvironmentServiceRecorder {
	return _m.recorder
}

func (_m *MockEnvironmentService) CreateEnvironment(ctx context.Context, name string, taskDefinition string, cluster string) (*types.Environment, error) {
	ret := _m.ctrl.Call(_m, "CreateEnvironment", ctx, name, taskDefinition, cluster)
	ret0, _ := ret[0].(*types.Environment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEnvironmentServiceRecorder) CreateEnvironment(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateEnvironment", arg0, arg1, arg2, arg3)
}

func (_m *MockEnvironmentService) GetEnvironment(ctx context.Context, name string) (*types.Environment, error) {
	ret := _m.ctrl.Call(_m, "GetEnvironment", ctx, name)
	ret0, _ := ret[0].(*types.Environment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEnvironmentServiceRecorder) GetEnvironment(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetEnvironment", arg0, arg1)
}

func (_m *MockEnvironmentService) DeleteEnvironment(ctx context.Context, name string) error {
	ret := _m.ctrl.Call(_m, "DeleteEnvironment", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockEnvironmentServiceRecorder) DeleteEnvironment(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteEnvironment", arg0, arg1)
}

func (_m *MockEnvironmentService) ListEnvironments(ctx context.Context) ([]types.Environment, error) {
	ret := _m.ctrl.Call(_m, "ListEnvironments", ctx)
	ret0, _ := ret[0].([]types.Environment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEnvironmentServiceRecorder) ListEnvironments(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListEnvironments", arg0)
}

func (_m *MockEnvironmentService) FilterEnvironments(ctx context.Context, filterKey string, filterVal string) ([]types.Environment, error) {
	ret := _m.ctrl.Call(_m, "FilterEnvironments", ctx, filterKey, filterVal)
	ret0, _ := ret[0].([]types.Environment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEnvironmentServiceRecorder) FilterEnvironments(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FilterEnvironments", arg0, arg1, arg2)
}

func (_m *MockEnvironmentService) ValidateAndCreateEnvironment(newEnv *types.Environment) types0.ValidateAndUpdateEnvironment {
	ret := _m.ctrl.Call(_m, "ValidateAndCreateEnvironment", newEnv)
	ret0, _ := ret[0].(types0.ValidateAndUpdateEnvironment)
	return ret0
}

func (_mr *_MockEnvironmentServiceRecorder) ValidateAndCreateEnvironment(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ValidateAndCreateEnvironment", arg0)
}
