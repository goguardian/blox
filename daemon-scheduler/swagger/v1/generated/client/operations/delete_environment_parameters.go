// Copyright 2016-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewDeleteEnvironmentParams creates a new DeleteEnvironmentParams object
// with the default values initialized.
func NewDeleteEnvironmentParams() *DeleteEnvironmentParams {
	var ()
	return &DeleteEnvironmentParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteEnvironmentParamsWithTimeout creates a new DeleteEnvironmentParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDeleteEnvironmentParamsWithTimeout(timeout time.Duration) *DeleteEnvironmentParams {
	var ()
	return &DeleteEnvironmentParams{

		timeout: timeout,
	}
}

// NewDeleteEnvironmentParamsWithContext creates a new DeleteEnvironmentParams object
// with the default values initialized, and the ability to set a context for a request
func NewDeleteEnvironmentParamsWithContext(ctx context.Context) *DeleteEnvironmentParams {
	var ()
	return &DeleteEnvironmentParams{

		Context: ctx,
	}
}

// NewDeleteEnvironmentParamsWithHTTPClient creates a new DeleteEnvironmentParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDeleteEnvironmentParamsWithHTTPClient(client *http.Client) *DeleteEnvironmentParams {
	var ()
	return &DeleteEnvironmentParams{
		HTTPClient: client,
	}
}

/*DeleteEnvironmentParams contains all the parameters to send to the API endpoint
for the delete environment operation typically these are written to a http.Request
*/
type DeleteEnvironmentParams struct {

	/*Name
	  Name of environment

	*/
	Name string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the delete environment params
func (o *DeleteEnvironmentParams) WithTimeout(timeout time.Duration) *DeleteEnvironmentParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete environment params
func (o *DeleteEnvironmentParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete environment params
func (o *DeleteEnvironmentParams) WithContext(ctx context.Context) *DeleteEnvironmentParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete environment params
func (o *DeleteEnvironmentParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete environment params
func (o *DeleteEnvironmentParams) WithHTTPClient(client *http.Client) *DeleteEnvironmentParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete environment params
func (o *DeleteEnvironmentParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithName adds the name to the delete environment params
func (o *DeleteEnvironmentParams) WithName(name string) *DeleteEnvironmentParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the delete environment params
func (o *DeleteEnvironmentParams) SetName(name string) {
	o.Name = name
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteEnvironmentParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param name
	if err := r.SetPathParam("name", o.Name); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
