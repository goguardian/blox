// Copyright 2016-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/goguardian/blox/daemon-scheduler/swagger/v1/generated/models"
)

// CreateEnvironmentReader is a Reader for the CreateEnvironment structure.
type CreateEnvironmentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateEnvironmentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewCreateEnvironmentOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewCreateEnvironmentBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewCreateEnvironmentNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewCreateEnvironmentOK creates a CreateEnvironmentOK with default headers values
func NewCreateEnvironmentOK() *CreateEnvironmentOK {
	return &CreateEnvironmentOK{}
}

/*CreateEnvironmentOK handles this case with default header values.

OK
*/
type CreateEnvironmentOK struct {
	Payload *models.Environment
}

func (o *CreateEnvironmentOK) Error() string {
	return fmt.Sprintf("[POST /environments][%d] createEnvironmentOK  %+v", 200, o.Payload)
}

func (o *CreateEnvironmentOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Environment)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateEnvironmentBadRequest creates a CreateEnvironmentBadRequest with default headers values
func NewCreateEnvironmentBadRequest() *CreateEnvironmentBadRequest {
	return &CreateEnvironmentBadRequest{}
}

/*CreateEnvironmentBadRequest handles this case with default header values.

Bad Request
*/
type CreateEnvironmentBadRequest struct {
	Payload string
}

func (o *CreateEnvironmentBadRequest) Error() string {
	return fmt.Sprintf("[POST /environments][%d] createEnvironmentBadRequest  %+v", 400, o.Payload)
}

func (o *CreateEnvironmentBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateEnvironmentNotFound creates a CreateEnvironmentNotFound with default headers values
func NewCreateEnvironmentNotFound() *CreateEnvironmentNotFound {
	return &CreateEnvironmentNotFound{}
}

/*CreateEnvironmentNotFound handles this case with default header values.

Resource not found, e.g. Cluster missing or TaskDefinition missing
*/
type CreateEnvironmentNotFound struct {
	Payload string
}

func (o *CreateEnvironmentNotFound) Error() string {
	return fmt.Sprintf("[POST /environments][%d] createEnvironmentNotFound  %+v", 404, o.Payload)
}

func (o *CreateEnvironmentNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
